package industry;

import org.bukkit.Bukkit;
import org.bukkit.Material;
import org.bukkit.block.Block;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.block.Action;
import org.bukkit.event.block.BlockBreakEvent;
import org.bukkit.event.block.BlockDamageEvent;
import org.bukkit.event.block.BlockPlaceEvent;
import org.bukkit.event.player.PlayerAnimationEvent;
import org.bukkit.event.player.PlayerInteractEntityEvent;
import org.bukkit.event.player.PlayerInteractEvent;
import org.bukkit.event.player.PlayerItemConsumeEvent;

import actives.Active;
import actives.Active.ActiveState;
import actives.Active.ActiveType;
import custom.Tool;
import main.Plugin;

public class IndustryHandler implements Listener {

	public IndustryHandler(Plugin plugin) {
		Bukkit.getPluginManager().registerEvents(this, plugin);
	}

	@EventHandler
	private void industryBuff(BlockDamageEvent event) {
		Player player = event.getPlayer();
		Block block = event.getBlock();
		switch (Tool.getTool(player.getItemInHand())) {
		case AXE:
			if (Woodcutting.isLoggable(block)) {
				Woodcutting.active(player, block);
				Industry.applyBuff(player, block);
			}
			break;
		case PICKAXE:
			if (Mining.isMinable(block)) {
				Mining.active(player, block);
				Industry.applyBuff(player, block);
			}
			break;
		case SPADE:
			if (Archaeology.isDiggable(block)) {
				Archaeology.active(player, block);
				Industry.applyBuff(player, block);
			}
			break;
		case HOE:
			if (Farming.isCrop(block)) {
				Industry.applyBuff(player, block);
			}			
			break;
		default:
			break;
		}
	}

	@EventHandler
	private void refreshIndustryBuff(PlayerAnimationEvent event) {
		Player player = event.getPlayer();
		Block block = player.getTargetBlock(null, 5);
		switch (Tool.getTool(player.getItemInHand())) {
		case AXE:
		case PICKAXE:
		case SPADE:
		case HOE:
			Industry.refreshBuff(player, block);
			break;
		default:
			break;
		}
	}
	
	@EventHandler
	private void blockBreak(BlockBreakEvent event) {
		Player player = event.getPlayer();
		Block block = event.getBlock();
		if (Farming.isCrop(block)) {
			Farming.blockBreak(player, block);
		}
		switch (Tool.getTool(player.getItemInHand())) {
		case AXE:
			if (Woodcutting.isLoggable(block)) {
				Woodcutting.blockBreak(player, block);
			}
			break;
		case PICKAXE:
			if (Mining.isMinable(block)) {
				Mining.blockBreak(player, block);
			}
			break;
		case SPADE:
			if (Archaeology.isDiggable(block)) {
				Archaeology.blockBreak(player, block);
			}
			break;
		default:
			break;
		}
	}

	@EventHandler
	private void industryActives(PlayerInteractEvent event) {
		if (event.getAction().equals(Action.RIGHT_CLICK_BLOCK)) {
			Player player = event.getPlayer();
			Block block = event.getClickedBlock();
			Farming.active(player, block);
			switch (Tool.getTool(player.getItemInHand())) {
			case AXE:
				if (block.getType().equals(Material.LOG)) {
					if (Active.getState(player, ActiveType.WOODCUTTING).equals(ActiveState.READY)) {
						Active.activate(player, ActiveType.WOODCUTTING, 0, 300);
					}
					else {
						Active.prime(player, ActiveType.WOODCUTTING, 0);
					}
				}
				break;
			case PICKAXE:
				if (Mining.isMinable(block)) {
					Active.prime(player, ActiveType.MINING, 10);
				}
				break;
			case SPADE:
				if (Archaeology.isDiggable(block)) {
					Active.prime(player, ActiveType.ARCHAEOLOGY, 10);
				}
				break;
			default:
				break;
			}
		}
	}
	
	@EventHandler
	private void farmingGrowthPassive(BlockPlaceEvent event) {
		Farming.blockPlace(event.getPlayer(), event.getBlock());
	}
	
	@EventHandler
	private void farmingHungerPassive(PlayerItemConsumeEvent event) {
		Farming.itemConsume(event.getPlayer(), event.getItem());
	}
	
	@EventHandler
	private void farmingBlockConversion(PlayerInteractEvent event) {
		Farming.active(event.getPlayer(), event.getClickedBlock());
	}
	
	@EventHandler
	private void farmingCowConversion(PlayerInteractEntityEvent event) {
		Farming.active(event.getPlayer(), event.getRightClicked());
	}
}
