package factions;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.HashSet;
import java.util.logging.Logger;

import main.Plugin;

import org.bukkit.Bukkit;
import org.bukkit.Chunk;
import org.bukkit.Location;
import org.bukkit.World;
import org.bukkit.entity.Player;

public class FactionHandler {
	private static HashSet<Faction> factions = new HashSet<Faction>();
	private static HashMap<Player, Faction> players = new HashMap<Player, Faction>();
	private final Connection connection; 
	
	public FactionHandler(Connection connection, Plugin plugin) {
		this.connection = connection;
		new FactionListener(connection, plugin);
		new FactionCommands(plugin);
		try {
			String factionQuery = "SELECT * FROM factions GROUP BY faction";
			ResultSet factionData = connection.prepareStatement(factionQuery).executeQuery();
			while (factionData.next()) {
				Faction faction = new Faction(factionData.getString("faction"));
				if (factionData.getString("land") != null) {
					String[] allLand = factionData.getString("land").split(":");
					for(String landInfo : allLand) {
						String[] land = landInfo.split(",");
						World world = Bukkit.getWorld(land[0]);
						int x = Integer.parseInt(land[1]);
						int z = Integer.parseInt(land[2]);
						faction.addLand(new Land(world, x, z));
					}
				}
				if (factionData.getString("home") != null) {
					String[] home = factionData.getString("home").split(",");
					World world = Bukkit.getWorld(home[0]);
					int x = Integer.parseInt(home[1]);
					int y = Integer.parseInt(home[2]);
					int z = Integer.parseInt(home[3]);
					faction.setHome(new Location(world, x, y, z));
				}
				
				String playerQuery = "SELECT username, power FROM factions WHERE faction = ?";
				PreparedStatement statement = connection.prepareStatement(playerQuery);
				statement.setString(1, faction.name());
				ResultSet playerData = connection.prepareStatement(playerQuery).executeQuery();
				while (playerData.next()) {
					Player player = Bukkit.getPlayer(playerData.getString("username"));
					Status status = Status.getStatus(playerData.getString("status"));
					faction.addMember(player, status);
					players.put(player, faction);
				}
				
				factions.add(faction);
			}
		} 
		catch (SQLException e) {
			Logger.getLogger("Minecraft").info("Unable to load faction data");
		}
	}
	
	public void quit() {
		String update = "UPDATE factions SET land = ?, home = ?  WHERE faction = ?";
		try {
			PreparedStatement statement = connection.prepareStatement(update);
			for(Faction faction : factions) {
				statement.setString(1, faction.serializeLand());
				statement.setString(2, faction.serializeHome());
				statement.setString(3, faction.name());
				statement.addBatch();
			}
			statement.executeBatch();
		}
		catch (SQLException e) {
			Logger.getLogger("Minecraft").info("Unable to update factions");
		}
	}
	
	public static Faction getFaction(Player player) {
		for(Faction faction : factions) {
			for(Player member : faction.getMembers()) {
				if (member.equals(player)) {
					return faction;
				}
			}
		}
		return null;		
	}
	
	public static Faction getFaction(Chunk chunk) {
		for(Faction faction : factions) {
			for(Land land : faction.getLand()) {
				if (land.getChunk().equals(chunk)) {
					return faction;
				}
			}
		}
		return null;
	}
	
	public static boolean inFaction(Player player) {
		return !getFaction(player).equals(null);	
	}
}
