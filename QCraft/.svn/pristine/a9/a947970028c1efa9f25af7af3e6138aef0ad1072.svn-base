package factions;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Map.Entry;
import java.util.Set;

import org.bukkit.Location;
import org.bukkit.entity.Player;

public class Faction {
	private String name;
	private HashMap<Player, Status> members;
	private HashSet<Land> land;
	private Home home;
	
	private enum Status {
		RECRUIT, MEMBER, MODERATOR, ADMIN;
	}

	public Faction(String name) {
		this.name = name;
	}
	
	public String name() {
		return name;
	}
	
	public void setName(String newName) {
		name = newName;
	}
	
	public Player admin() {
		for (Entry<Player, Status> entry : members.entrySet()) {
			if (entry.getValue().equals(Status.ADMIN)) {
				return entry.getKey();
			}
		}
		return null;
	}
	
	public boolean setMemberStatus(Player player, Status status) {
		if (members.containsKey(player)) {
			switch (status) {
			case RECRUIT:
				members.put(player, Status.RECRUIT);
				return true;
			case MEMBER:
				members.put(player, Status.MEMBER);
				return true;
			case MODERATOR:
				members.put(player, Status.MODERATOR);
				return true;
			case ADMIN:
				members.put(admin(), Status.MODERATOR);
				members.put(player, Status.ADMIN);	
				return true;				
			}		
		}
		return false;
	}
	
	public Status getStatus(Player player) {
		if (members.containsKey(player)) {
			return members.get(player);
		}
		return null;
	}
	
	public Set<Player> members() {
		return members.keySet();
	}
	
	public boolean addMember(Player player) {
		if (!members.containsKey(player)) {
			members.put(player, Status.RECRUIT);
			return true;
		}
		return false;
	}
	
	public boolean addMember(Player player, Status status) {
		if (!members.containsKey(player)) {
			members.put(player, status);
			return true;
		}
		return false;
	}
	
	public boolean removeMember(Player player) {
		if (members.containsKey(player)) {
			members.remove(player);
			return true;
		}
		return false;
	}
	
	public HashSet<Land> getLand() {
		return land;
	}
	
	public boolean addLand(Land newLand) {
		if (!land.contains(newLand)) {
			land.add(newLand);
			return true;
		}
		return false;
	}
	
	public boolean removeLand(Land landToRemove) {
		if (!land.contains(landToRemove)) {
			land.remove(landToRemove);
			return true;
		}
		return false;
	}
	
	public Location home() {
		return home.getLocation();
	}
	
	public void setHome(Location location) {
		home = new Home(location);
	}
}
