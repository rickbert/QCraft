package factions;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.logging.Logger;

import main.Plugin;

import org.bukkit.Bukkit;
import org.bukkit.entity.Arrow;
import org.bukkit.entity.Entity;
import org.bukkit.entity.LivingEntity;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.entity.EntityDamageEvent;
import org.bukkit.event.entity.PlayerDeathEvent;
import org.bukkit.event.player.PlayerJoinEvent;
import org.bukkit.event.player.PlayerQuitEvent;

public class FactionListener implements Listener {
	private final Connection connection;
	private static HashMap<Player, Power> power = new HashMap<Player, Power>();
	
	public FactionListener(Connection connection, Plugin plugin) {
		this.connection = connection;
		Bukkit.getPluginManager().registerEvents(this, plugin);
	}
	
	public static int getPower(Player player) {
		return power.containsKey(player)? power.get(player).getPower() : 0;
	}
	
	@EventHandler
	private void playerLogin(PlayerJoinEvent event) {
		String query = "SELECT power FROM factions WHERE username = ?";
		PreparedStatement statement;
		try {
			statement = connection.prepareStatement(query);
			statement.setString(1, event.getPlayer().getName());
			ResultSet data = statement.executeQuery();
			int playerPower = data.getInt("power");
			power.put(event.getPlayer(), new Power(event.getPlayer(), playerPower));
		} 
		catch (SQLException e) {
			Logger.getLogger("Minecraft").info("Unable to get Power for " + event.getPlayer().getName());
		}
	}
	
	@EventHandler
	private void playerQuit(PlayerQuitEvent event) {
		String update= "UPDATE factions SET power = ? WHERE username = ?";
		try {
			PreparedStatement statement = connection.prepareStatement(update);
			statement.setInt(1, power.get(event.getPlayer()).getPower());
			statement.setString(2, event.getPlayer().getName());
			statement.executeUpdate();
		}
		catch (SQLException e) {
			Logger.getLogger("Minecraft").info("Unable to update Power for " + event.getPlayer().getName());
		}
		power.remove(event.getPlayer());
	}
	
	@EventHandler
	private void playerDied(PlayerDeathEvent event) {
		if (event.getEntity().getKiller() != null) {
			power.get(event.getEntity()).lowerPower(5);
		}
		else {
			power.get(event.getEntity()).lowerPower(2);
		}
	}
	
	@EventHandler (priority = EventPriority.LOWEST)
	private void friendlyFire(EntityDamageEvent event) {
		if (event.getEntity() instanceof Player) {
			Faction faction = FactionHandler.getFaction((Player) event.getEntity());
			Entity damager = event.getEntity().getLastDamageCause().getEntity();
			if (damager instanceof Player) {
				if (FactionHandler.getFaction((Player) damager).equals(faction)) {
					event.setCancelled(true);
				}
			}
			if (damager instanceof Arrow) {
				if (((Arrow) damager).getShooter() instanceof Player) {
					LivingEntity shooter = ((Arrow) damager).getShooter();
					if (FactionHandler.getFaction((Player) shooter).equals(faction)) {
						event.setCancelled(true);
					}
				}
			}
		}
	}
}
